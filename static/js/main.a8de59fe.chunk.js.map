{"version":3,"sources":["components/Searchbar/Searchbar.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/Button/Button.js","components/Modal/Modal.js","components/requests.js","components/constList/constList.js","components/Loader/Loader.js","App.js","index.js"],"names":["HeaderSearchbar","styled","header","SearchForm","form","SearchFormButton","button","SearchFormButtonLabel","span","SearchFormInput","input","Searchbar","props","useState","value","setValue","onSubmit","evt","preventDefault","querry","currentTarget","elements","type","name","autocomplete","autoFocus","placeholder","onChange","target","GalleryItem","li","GalleryItemImage","img","ImageGalleryItem","onClick","onImgClick","max","tag","src","imgSrc","originalImg","alt","Gallery","ul","ImageGallery","images","length","map","image","min","tags","id","LoadMoreBtn","Button","ModalOverlay","div","ModalDiv","modalRoot","document","querySelector","Modal","useEffect","handleKeydown","e","code","onClose","window","addEventListener","removeEventListener","onShow","createPortal","getImagesGallery","query","currPage","a","querryUrl","fetch","method","cache","response","ok","json","dataArr","console","log","Container","SpinnerLoader","color","height","width","App","isShow","showModal","setShowModal","isLoading","setIsLoading","setQuerry","totalImg","setTotalImg","currentPage","setCurrentPage","imagesData","setImagesData","getQuerryData","total","hits","toast","error","position","imagesObj","hit","webformatURL","largeImageURL","success","state","alert","setTimeout","pageLeave","Math","ceil","querryObj","modalObj","prevState","ReactDOM","render","StrictMode","getElementById"],"mappings":"0PAIMA,EAAkBC,IAAOC,OAAV,0gBAsBfC,EAAaF,IAAOG,KAAV,2MAWVC,EAAmBJ,IAAOK,OAAV,0bAmBhBC,EAAwBN,IAAOO,KAAV,8OAcrBC,EAAkBR,IAAOS,MAAV,mVAkBN,SAASC,EAAUC,GAChC,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAYA,OACE,cAACf,EAAD,UACE,eAACG,EAAD,CAAYa,SAZS,SAAAC,GACvBA,EAAIC,iBACJN,EAAMI,SAAS,CAAEG,OAAQF,EAAIG,cAAcC,SAASF,OAAOL,QAC3DC,EAAS,KASP,UACE,cAACV,EAAD,UACE,cAACE,EAAD,uBAGF,cAACE,EAAD,CACEa,KAAK,OACLC,KAAK,SACLC,aAAa,MACbC,WAAS,EACTC,YAAY,2BACZZ,MAAOA,EACPa,SAlBa,SAAAV,GACnBF,EAASE,EAAIW,OAAOd,eC/FxB,I,EAAMe,EAAc5B,IAAO6B,GAAV,uMAQXC,EAAmB9B,IAAO+B,IAAV,+PAcP,SAASC,EAAiBrB,GAKvC,OACE,cAACiB,EAAD,UACE,cAACE,EAAD,CACEG,QAPe,SAAAjB,GACnBL,EAAMuB,WAAW,CAAEC,IAAKxB,EAAMwB,IAAKC,IAAKzB,EAAMyB,OAO1CC,IAAK1B,EAAM2B,OACXC,YAAa5B,EAAMwB,IACnBK,IAAK7B,EAAMyB,QChCnB,I,EAAMK,EAAUzC,IAAO0C,GAAV,2TAeE,SAASC,EAAahC,GACnC,OACEA,EAAMiC,OAAOC,OAAS,GACpB,cAACJ,EAAD,UACG9B,EAAMiC,OAAOE,KAAI,SAAAC,GAAK,OACrB,cAACf,EAAD,CAEEM,OAAQS,EAAMC,IACdb,IAAKY,EAAMZ,IACXC,IAAKW,EAAME,KACXf,WAAYvB,EAAMsB,SAJbc,EAAMG,SCrBvB,I,IAAMC,EAAcnD,IAAOK,OAAV,6cAqBF,SAAS+C,EAAOzC,GAK7B,OACE,cAACwC,EAAD,CAAa9B,KAAK,SAASY,QALV,WACjBtB,EAAMsB,WAIN,kCC1BJ,IAAMoB,EAAerD,IAAOsD,IAAV,0QAeZC,EAAWvD,IAAOsD,IAAV,gHAORE,EAAYC,SAASC,cAAc,eAE1B,SAASC,EAAMhD,GAC5BiD,qBAAU,WACR,IAAMC,EAAgB,SAAAC,GACL,WAAXA,EAAEC,MACJpD,EAAMqD,WAKV,OADAC,OAAOC,iBAAiB,UAAWL,GAC5B,WACLI,OAAOE,oBAAoB,UAAWN,MAEvC,CAAClD,IAEJ,IAIA,EAAqBA,EAAMyD,OAAnB/B,EAAR,EAAQA,IAAKG,EAAb,EAAaA,IAEb,OAAO6B,uBACL,cAAChB,EAAD,CAAcpB,QAPI,SAAA6B,GAClBnD,EAAMqD,WAMN,SACE,cAACT,EAAD,UACE,qBAAKlB,IAAKA,EAAKG,IAAKA,QAGxBgB,GCrDG,I,EAAMc,EAAgB,uCAAG,WAAOC,EAAOC,GAAd,mBAAAC,EAAA,6DACxBC,EADwB,UCAR,2BDAQ,cACKH,EADL,iBACmBC,EADnB,gBCFT,qCDES,6DCDR,IDCQ,SAEPG,MAAMD,EAAW,CACtCE,OAAQ,MACRC,MAAO,aAJqB,YAExBC,EAFwB,QAOjBC,GAPiB,iCAQND,EAASE,OARH,cAQtBC,EARsB,yBASrBA,GATqB,QAW5BC,QAAQC,IAAI,cAXgB,4CAAH,wD,iBECvBC,EAAYpF,IAAOsD,IAAV,4GAQA,SAAS+B,IACtB,OACE,cAACD,EAAD,UACE,cAAC,IAAD,CAAQ/D,KAAK,OAAOiE,MAAM,UAAUC,OAAQ,IAAKC,MAAO,QCH/C,SAASC,IACtB,MAAkC7E,mBAAS,CACzC8E,QAAQ,EACRrD,IAAK,KACLG,IAAK,OAHP,mBAAOmD,EAAP,KAAkBC,EAAlB,KAKA,EAAkChF,oBAAS,GAA3C,mBAAOiF,EAAP,KAAkBC,EAAlB,KACA,EAA4BlF,mBAAS,IAArC,mBAAOM,EAAP,KAAe6E,EAAf,KACA,EAAgCnF,mBAAS,MAAzC,mBAAOoF,EAAP,KAAiBC,EAAjB,KACA,EAAsCrF,mBAAS,GAA/C,mBAAOsF,EAAP,KAAoBC,EAApB,KACA,EAAoCvF,mBAAS,IAA7C,mBAAOwF,EAAP,KAAmBC,EAAnB,KAEAzC,qBAAU,WACR,GAAK1C,EAAL,CAIA,IAAMoF,EAAa,uCAAG,WAAgBpF,EAAQsD,GAAxB,qBAAAC,EAAA,6DACpBqB,GAAa,GADO,kBAIOxB,EAAiBpD,EAAQsD,GAJhC,YAIZ4B,EAJY,4BAMRG,EAAgBH,EAAhBG,MAAOC,EAASJ,EAATI,KAEVD,EARW,wBASdE,IAAMC,MAAM,oBAAqB,CAAEC,SAAU,cAT/B,2BAaVC,EAAYJ,EAAK1D,KAAI,SAAA+D,GAAG,MAAK,CACjC3D,GAAI2D,EAAI3D,GACRF,IAAK6D,EAAIC,aACT3E,IAAK0E,EAAIE,cACT9D,KAAM4D,EAAI5D,SAGK,IAAbuB,IACFyB,EAAYM,GACZJ,EAAe3B,GAEf6B,EAAcO,GAEdH,IAAMO,QAAN,UAAiBT,EAAjB,sBAA4C,CAC1CI,SAAU,eAIVnC,EAAW,IACb2B,EAAe3B,GACf6B,GAAc,SAAAY,GAAK,4BAAQA,GAAR,YAAkBL,QAjCvB,0DAqClBM,MAAM,gCArCY,yBAuClBC,YAAW,kBAAMrB,GAAa,KAAQ,KAvCpB,6EAAH,wDA2CnBQ,EAAcpF,EAAQgF,MACrB,CAAChF,EAAQgF,IAEZ,IA6BQR,EAAWC,EAAXD,OACF0B,EAAYC,KAAKC,KAAKtB,EFvGN,IEuG6BE,EAEnD,OACE,qCACGR,GAAU,cAAC/B,EAAD,CAAOS,OAAQuB,EAAW3B,QAbtB,WACjB4B,EAAa,CACXF,QAAQ,EACRrD,IAAK,KACLG,IAAK,UAUL,cAAC,IAAD,IACA,cAAC9B,EAAD,CAAWK,SApCM,SAAAwG,GACnB,IAAQrG,EAAWqG,EAAXrG,OAER6E,EAAU7E,GACViF,EAAe,MAiCb,cAACxD,EAAD,CAAcC,OAAQwD,EAAYnE,QA1BlB,SAAAuF,GAClB,IAAQ9B,EAAWC,EAAXD,OAERE,EAAa,CACXF,QAASA,EACTrD,IAAKmF,EAASrF,IACdK,IAAKgF,EAASpF,OAoBd,SACE,cAACJ,EAAD,MAED6D,GAAa,cAACR,EAAD,IACb+B,GAAa,GAAK,cAAChE,EAAD,CAAQnB,QAlCJ,WACzBkE,GAAe,SAAAsB,GAAS,OAAIA,EAAY,WC9E5CC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACnC,EAAD,MAEFhC,SAASoE,eAAe,W","file":"static/js/main.a8de59fe.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst HeaderSearchbar = styled.header`\r\n   {\r\n    top: 0;\r\n    left: 0;\r\n    position: sticky;\r\n    z-index: 1100;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-height: 64px;\r\n    padding-right: 24px;\r\n    padding-left: 24px;\r\n    padding-top: 12px;\r\n    padding-bottom: 12px;\r\n    color: #fff;\r\n    background-color: #3f51b5;\r\n    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\r\n      0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\r\n    margin-bottom: 20px;\r\n  }\r\n`;\r\n\r\nconst SearchForm = styled.form`\r\n   {\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n    max-width: 600px;\r\n    background-color: #fff;\r\n    border-radius: 3px;\r\n    overflow: hidden;\r\n  }\r\n`;\r\nconst SearchFormButton = styled.button`\r\n   {\r\n    display: inline-block;\r\n    width: 48px;\r\n    height: 48px;\r\n    border: 0;\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n    background-image: url(https://img.icons8.com/material-outlined/24/000000/search--v1.png);\r\n    opacity: 0.6;\r\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n    cursor: pointer;\r\n    outline: none;\r\n  }\r\n  &: hover {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst SearchFormButtonLabel = styled.span`\r\n   {\r\n    position: absolute;\r\n    width: 1px;\r\n    height: 1px;\r\n    padding: 0;\r\n    overflow: hidden;\r\n    clip: rect(0, 0, 0, 0);\r\n    white-space: nowrap;\r\n    clip-path: inset(50%);\r\n    border: 0;\r\n  }\r\n`;\r\n\r\nconst SearchFormInput = styled.input`\r\n   {\r\n    display: inline-block;\r\n    width: 100%;\r\n    font: inherit;\r\n    font-size: 20px;\r\n    border: none;\r\n    outline: none;\r\n    padding-left: 4px;\r\n    padding-right: 4px;\r\n    font-family: Verdana, Arial, Helvetica, sans-serif;\r\n  }\r\n  & :placeholder {\r\n    font: inherit;\r\n    font-size: 18px;\r\n  }\r\n`;\r\n\r\nexport default function Searchbar(props) {\r\n  const [value, setValue] = useState('');\r\n\r\n  const handleFormSubmit = evt => {\r\n    evt.preventDefault();\r\n    props.onSubmit({ querry: evt.currentTarget.elements.querry.value });\r\n    setValue('');\r\n  };\r\n\r\n  const handleChange = evt => {\r\n    setValue(evt.target.value);\r\n  };\r\n\r\n  return (\r\n    <HeaderSearchbar>\r\n      <SearchForm onSubmit={handleFormSubmit}>\r\n        <SearchFormButton>\r\n          <SearchFormButtonLabel>Search</SearchFormButtonLabel>\r\n        </SearchFormButton>\r\n\r\n        <SearchFormInput\r\n          type=\"text\"\r\n          name=\"querry\"\r\n          autocomplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search images and photos\"\r\n          value={value}\r\n          onChange={handleChange}\r\n        />\r\n      </SearchForm>\r\n    </HeaderSearchbar>\r\n  );\r\n}\r\n\r\nSearchbar.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GalleryItem = styled.li`\r\n   {\r\n    border-radius: 2px;\r\n    box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\r\n      0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\r\n  }\r\n`;\r\n\r\nconst GalleryItemImage = styled.img`\r\n   {\r\n    width: 100%;\r\n    height: 260px;\r\n    object-fit: cover;\r\n    transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n    cursor: pointer;\r\n  }\r\n  & :hover {\r\n    transform: scale(1.2);\r\n    cursor: zoom-in;\r\n  }\r\n`;\r\n\r\nexport default function ImageGalleryItem(props) {\r\n  const onImageClick = evt => {\r\n    props.onImgClick({ max: props.max, tag: props.tag });\r\n  };\r\n\r\n  return (\r\n    <GalleryItem>\r\n      <GalleryItemImage\r\n        onClick={onImageClick}\r\n        src={props.imgSrc}\r\n        originalImg={props.max}\r\n        alt={props.tag}\r\n      />\r\n    </GalleryItem>\r\n  );\r\n}\r\n\r\nImageGalleryItem.propTypes = {\r\n  images: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      imgSrc: PropTypes.string.isRequired,\r\n      max: PropTypes.string.isRequired,\r\n      tag: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n\r\n  onImgClick: PropTypes.func,\r\n};\r\n","import styled from 'styled-components';\r\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Gallery = styled.ul`\r\n   {\r\n    display: grid;\r\n    max-width: calc(100vw - 48px);\r\n    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\r\n    grid-gap: 16px;\r\n    margin-top: 0;\r\n    margin-bottom: 0;\r\n    padding: 0;\r\n    list-style: none;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n  }\r\n`;\r\n\r\nexport default function ImageGallery(props) {\r\n  return (\r\n    props.images.length > 0 && (\r\n      <Gallery>\r\n        {props.images.map(image => (\r\n          <ImageGalleryItem\r\n            key={image.id}\r\n            imgSrc={image.min}\r\n            max={image.max}\r\n            tag={image.tags}\r\n            onImgClick={props.onClick}\r\n          />\r\n        ))}\r\n      </Gallery>\r\n    )\r\n  );\r\n}\r\n\r\nImageGallery.propTypes = {\r\n  images: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      max: PropTypes.string.isRequired,\r\n      min: PropTypes.string.isRequired,\r\n      tags: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst LoadMoreBtn = styled.button`\r\n   {\r\n    display: block;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    margin-top: 15px;\r\n    margin-bottom: 15px;\r\n    padding: 10px;\r\n    border-radius: 10%;\r\n    border: 2px solid #ccc;\r\n    font-weight: 600;\r\n    box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%),\r\n      0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\r\n    cursor: pointer;\r\n\r\n    &: hover {\r\n      background-color: #ccc;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function Button(props) {\r\n  const onBtnClick = () => {\r\n    props.onClick();\r\n  };\r\n\r\n  return (\r\n    <LoadMoreBtn type=\"button\" onClick={onBtnClick}>\r\n      &nbsp;Load&nbsp;more&nbsp;\r\n    </LoadMoreBtn>\r\n  );\r\n}\r\n\r\nButton.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n","import { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { createPortal } from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ModalOverlay = styled.div`\r\n   {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: rgba(0, 0, 0, 0.8);\r\n    z-index: 1200;\r\n  }\r\n`;\r\n\r\nconst ModalDiv = styled.div`\r\n   {\r\n    max-width: calc(100vw - 48px);\r\n    max-height: calc(100vh - 24px);\r\n  }\r\n`;\r\n\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nexport default function Modal(props) {\r\n  useEffect(() => {\r\n    const handleKeydown = e => {\r\n      if (e.code === 'Escape') {\r\n        props.onClose();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeydown);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeydown);\r\n    };\r\n  }, [props]);\r\n\r\n  const handleClick = e => {\r\n    props.onClose();\r\n  };\r\n\r\n  const { src, alt } = props.onShow;\r\n\r\n  return createPortal(\r\n    <ModalOverlay onClick={handleClick}>\r\n      <ModalDiv>\r\n        <img src={src} alt={alt} />\r\n      </ModalDiv>\r\n    </ModalOverlay>,\r\n    modalRoot,\r\n  );\r\n}\r\n\r\nModal.propTypes = {\r\n  onShow: PropTypes.shape({\r\n    alt: PropTypes.string.isRequired,\r\n    isShow: PropTypes.bool.isRequired,\r\n    src: PropTypes.string.isRequired,\r\n  }),\r\n\r\n  onClose: PropTypes.func.isRequired,\r\n};\r\n","import { USR_KEY, PER_PAGE, BASE_URL } from './constList/constList';\r\n\r\nexport const getImagesGallery = async (query, currPage) => {\r\n  const querryUrl = `${BASE_URL}?q=${query}&page=${currPage}&key=${USR_KEY}&image_type=photo&orientation=horizontal&per_page=${PER_PAGE}`;\r\n  const response = await fetch(querryUrl, {\r\n    method: 'GET',\r\n    cache: 'no-cache',\r\n  });\r\n\r\n  if (response.ok) {\r\n    const dataArr = await response.json();\r\n    return dataArr;\r\n  } else {\r\n    console.log('HTTP ERROR');\r\n  }\r\n};\r\n","export const USR_KEY = '24105767-529978ca3577f63abe59720d6';\r\nexport const PER_PAGE = 12;\r\nexport const BASE_URL = 'https://pixabay.com/api/';\r\n","import Loader from 'react-loader-spinner';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n   {\r\n    display: flex;\r\n    margin: 15px;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nexport default function SpinnerLoader() {\r\n  return (\r\n    <Container>\r\n      <Loader type=\"Grid\" color=\"#3f51b5\" height={100} width={100} />\r\n    </Container>\r\n  );\r\n}\r\n","import { useState, useEffect } from 'react';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { PER_PAGE } from './components/constList/constList';\nimport Searchbar from './components/Searchbar/Searchbar';\nimport ImageGallery from './components/ImageGallery/ImageGallery';\nimport ImageGalleryItem from './components/ImageGalleryItem/ImageGalleryItem';\nimport Button from './components/Button/Button';\nimport Modal from './components/Modal/Modal';\nimport { getImagesGallery } from './components/requests';\nimport SpinnerLoader from './components/Loader/Loader';\n\nexport default function App() {\n  const [showModal, setShowModal] = useState({\n    isShow: false,\n    src: null,\n    alt: null,\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [querry, setQuerry] = useState('');\n  const [totalImg, setTotalImg] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [imagesData, setImagesData] = useState([]);\n\n  useEffect(() => {\n    if (!querry) {\n      return;\n    }\n\n    const getQuerryData = async function (querry, currPage) {\n      setIsLoading(true);\n\n      try {\n        const imagesData = await getImagesGallery(querry, currPage);\n        if (imagesData) {\n          const { total, hits } = imagesData;\n\n          if (!total) {\n            toast.error('Images not find !', { position: 'top-right' });\n            return;\n          }\n\n          const imagesObj = hits.map(hit => ({\n            id: hit.id,\n            min: hit.webformatURL,\n            max: hit.largeImageURL,\n            tags: hit.tags,\n          }));\n\n          if (currPage === 1) {\n            setTotalImg(total);\n            setCurrentPage(currPage);\n\n            setImagesData(imagesObj);\n\n            toast.success(`${total} images was find !`, {\n              position: 'top-right',\n            });\n          }\n\n          if (currPage > 1) {\n            setCurrentPage(currPage);\n            setImagesData(state => [...state, ...imagesObj]);\n          }\n        }\n      } catch (error) {\n        alert('Incorrect answer form server');\n      } finally {\n        setTimeout(() => setIsLoading(false), 500);\n      }\n    };\n\n    getQuerryData(querry, currentPage);\n  }, [querry, currentPage]);\n\n  const handleSubmit = querryObj => {\n    const { querry } = querryObj;\n\n    setQuerry(querry);\n    setCurrentPage(1);\n  };\n\n  const onClickLoadMoreBtn = () => {\n    setCurrentPage(prevState => prevState + 1);\n  };\n\n  const toggleModal = modalObj => {\n    const { isShow } = showModal;\n\n    setShowModal({\n      isShow: !isShow,\n      src: modalObj.max,\n      alt: modalObj.tag,\n    });\n  };\n\n  const modalClose = () => {\n    setShowModal({\n      isShow: false,\n      src: null,\n      alt: null,\n    });\n  };\n\n  const { isShow } = showModal;\n  const pageLeave = Math.ceil(totalImg / PER_PAGE) - currentPage;\n\n  return (\n    <>\n      {isShow && <Modal onShow={showModal} onClose={modalClose} />}\n      <Toaster />\n      <Searchbar onSubmit={handleSubmit} />\n      <ImageGallery images={imagesData} onClick={toggleModal}>\n        <ImageGalleryItem />\n      </ImageGallery>\n      {isLoading && <SpinnerLoader />}\n      {pageLeave >= 1 && <Button onClick={onClickLoadMoreBtn} />}\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}